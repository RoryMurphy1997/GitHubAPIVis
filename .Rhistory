bytes = as.numeric(dataFrameTemp[j])
}
}
#Adds it to DF
newRow = data.frame(Repository=name, Language=language, Bytes=bytes)
Languages = rbind(Languages, newRow)
print(Languages)
}
}
return(Languages)
}
Languages = PopularLanguages(Languages, gitReposDF)
Languages
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#Installs the r2d3 library
install_github("rstudio/r2d3")
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find repositories
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Find most popular language of each repository
Languages = data.frame(Repository=character(), Language=character(), Bytes=integer())
PopularLanguages = function(Languages, gitReposDF)
{
for(i in 1:length(gitReposDF))
{
reqTemp = GET(paste(gitReposDF$languages_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
#Checks if repository actually has any languages listed
if(length(dataFrameTemp) == 0)
{
}else
{
name = gitReposDF$name[i]
print(name)
language = NULL
bytes = -1
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp))
{
print(names(dataFrameTemp)[j])
print(as.numeric(dataFrameTemp[j]))
if(as.numeric(dataFrameTemp[j]) > -1)
{
language = names(dataFrameTemp)[j]
bytes = as.numeric(dataFrameTemp[j])
}
}
#Adds it to DF
newRow = data.frame(Name=name, Language=language, Bytes=bytes)
Languages = rbind(Languages, newRow)
print(Languages)
}
}
return(Languages)
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#Installs the r2d3 library
install_github("rstudio/r2d3")
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find repositories
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Find most popular language of each repository
Languages = data.frame(Repository=character(), Language=character(), Bytes=integer())
PopularLanguages = function(Languages, gitReposDF)
{
for(i in 1:length(gitReposDF))
{
reqTemp = GET(paste(gitReposDF$languages_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
#Checks if repository actually has any languages listed
if(length(dataFrameTemp) == 0)
{
}else
{
name = gitReposDF$name[i]
print(name)
language = NULL
bytes = -1
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp))
{
print(names(dataFrameTemp)[j])
print(as.numeric(dataFrameTemp[j]))
if(as.numeric(dataFrameTemp[j]) > -1)
{
language = names(dataFrameTemp)[j]
bytes = as.numeric(dataFrameTemp[j])
}
}
#Adds it to DF
newRow = data.frame(Name=name, Language=language, Bytes=bytes)
Languages = rbind(Languages, newRow)
print(Languages)
}
}
return(Languages)
}
Languages = PopularLanguages(Languages, gitReposDF)
Languages
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#Installs the r2d3 library
install_github("rstudio/r2d3")
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find repositories
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Find most popular language of each repository
Languages = data.frame(Name=character(), Language=character(), Bytes=integer())
PopularLanguages = function(Languages, gitReposDF)
{
for(i in 1:length(gitReposDF))
{
reqTemp = GET(paste(gitReposDF$languages_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
#Checks if repository actually has any languages listed
if(length(dataFrameTemp) == 0)
{
}else
{
name = gitReposDF$name[i]
print(name)
language = NULL
bytes = -1
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp))
{
print(names(dataFrameTemp)[j])
print(as.numeric(dataFrameTemp[j]))
if(as.numeric(dataFrameTemp[j]) > -1)
{
language = names(dataFrameTemp)[j]
bytes = as.numeric(dataFrameTemp[j])
}
}
#Adds it to DF
newRow = data.frame(Name=name, Language=language, Bytes=bytes)
Languages = rbind(Languages, newRow)
print(Languages)
}
}
return(Languages)
}
Languages = PopularLanguages(Languages, gitReposDF)
Languages
Languages
#Initialise first item in languages used dataframe
reqTemp = GET(paste(gitReposDF$languages_url[1]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
gitLanguagesUsedDF = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
length(gitLanguagesUsedDF)
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#Installs the r2d3 library
install_github("rstudio/r2d3")
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find repositories
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Find most popular language of each repository
Languages = data.frame(Name=character(), Language=character(), Bytes=integer())
PopularLanguages = function(Languages, gitReposDF)
{
for(i in 1:length(gitReposDF))
{
reqTemp = GET(paste(gitReposDF$languages_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
#Checks if repository actually has any languages listed
if(length(dataFrameTemp) == 0)
{
}else
{
name = gitReposDF$name[i]
print(name)
language = NULL
bytes = -1
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp))
{
print(names(dataFrameTemp)[j])
print(as.numeric(dataFrameTemp[j]))
if(as.numeric(dataFrameTemp[j]) > -1)
{
language = names(dataFrameTemp)[j]
bytes = as.numeric(dataFrameTemp[j])
}
}
#Adds it to DF
newRow = data.frame(Name=name, Language=language, Bytes=bytes)
Languages = rbind(Languages, newRow)
print(Languages)
}
}
return(Languages)
}
Languages = PopularLanguages(Languages, gitReposDF)
Languages
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#Installs the r2d3 library
install_github("rstudio/r2d3")
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find repositories
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Find most popular language of each repository
Languages = data.frame(Name=character(), Language=character(), Bytes=integer())
PopularLanguages = function(Languages, gitReposDF)
{
for(i in 1:length(gitReposDF))
{
reqTemp = GET(paste(gitReposDF$languages_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
#Checks if repository actually has any languages listed
if(length(dataFrameTemp) == 0)
{
}else
{
name = gitReposDF$name[i]
print(name)
language = NULL
bytes = -1
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp))
{
print(names(dataFrameTemp)[j])
print(as.numeric(dataFrameTemp[j]))
if(as.numeric(dataFrameTemp[j]) > -1)
{
language = names(dataFrameTemp)[j]
bytes = as.numeric(dataFrameTemp[j])
}
}
#Adds it to DF
newRow = data.frame(Name=name, Language=language, Bytes=bytes)
print(newRow)
Languages = rbind(Languages, newRow)
print(Languages)
}
}
return(Languages)
}
Languages = PopularLanguages(Languages, gitReposDF)
Languages
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#Installs the r2d3 library
install_github("rstudio/r2d3")
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find repositories
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Find most popular language of each repository
#ADDNAMEDEFBACK
Languages = data.frame(Name, Language=character(), Bytes=integer())
PopularLanguages = function(Languages, gitReposDF)
{
for(i in 1:length(gitReposDF))
{
reqTemp = GET(paste(gitReposDF$languages_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
#Checks if repository actually has any languages listed
if(length(dataFrameTemp) == 0)
{
}else
{
name = gitReposDF$name[i]
print(name)
language = NULL
bytes = -1
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp))
{
print(names(dataFrameTemp)[j])
print(as.numeric(dataFrameTemp[j]))
if(as.numeric(dataFrameTemp[j]) > -1)
{
language = names(dataFrameTemp)[j]
bytes = as.numeric(dataFrameTemp[j])
}
}
#Adds it to DF
newRow = data.frame(Name=name, Language=language, Bytes=bytes)
print(newRow)
Languages = rbind(Languages, newRow)
print(Languages)
}
}
return(Languages)
}
Languages = PopularLanguages(Languages, gitReposDF)
Languages
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#Installs the r2d3 library
install_github("rstudio/r2d3")
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find repositories
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Find most popular language of each repository
#ADDNAMEDEFBACK
Languages = data.frame(Name, Language=character(), Bytes=integer())
PopularLanguages = function(Languages, gitReposDF)
{
for(i in 1:length(gitReposDF))
{
reqTemp = GET(paste(gitReposDF$languages_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
#Checks if repository actually has any languages listed
if(length(dataFrameTemp) == 0)
{
}else
{
name = gitReposDF$name[i]
print(name)
language = NULL
bytes = -1
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp))
{
print(names(dataFrameTemp)[j])
print(as.numeric(dataFrameTemp[j]))
if(as.numeric(dataFrameTemp[j]) > -1)
{
language = names(dataFrameTemp)[j]
bytes = as.numeric(dataFrameTemp[j])
}
}
#Adds it to DF
newRow = data.frame(Name="name", Language=language, Bytes=bytes)
print(newRow)
Languages = rbind(Languages, newRow)
print(Languages)
}
}
return(Languages)
}
Languages = PopularLanguages(Languages, gitReposDF)
Languages
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#Installs the r2d3 library
install_github("rstudio/r2d3")
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find repositories
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name[1]
gitReposDF$name[2]
