#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
library(shiny)
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools","plotly")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
library(plotly)
remove.packages(plotly)
remove.packages("plotly")
#Opens necessary libraries
library(jsonlite)
remove.packages("plotly")
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools","plotly")
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
r2d3::r2d3("barcharts.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
library(r2d3)
r2d3(data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20), script = "barchart.js")
library(r2d3)
r2d3(data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20), script = "barcharts.js")
r2d3(data=c(1, 0.6, 0.8, 0.95, 0.40, 0.20), script = "barcharts.js")
r2d3::r2d3("barcharts.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("barcharts.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
dataExample = data.frame(date=c(2018-jan,2018-feb,2018-mar,2018-apr,2018-may,2019-jan,2019-feb,), value = c(95,76,87,66,63,89,78))
dataExample
dataExample = data.frame(date=c("2018-jan","2018-feb","2018-mar","2018-apr","2018-may","2019-jan","2019-feb"), value = c(95,76,87,66,63,89,78))
dataExample
#Plot Data
library(r2d3)
r2d3(data=dataExample, script = "barcharts.js")
r2d3::r2d3("barcharts.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
dataExample = read.csv("dataExample.csv")
dataExample
#Plot Data
library(r2d3)
r2d3(data=dataExample, script = "barcharts.js")
r2d3::r2d3("barcharts.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("barcharts.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
dataExample = read.csv("data.csv")
dataExample
#Plot Data
library(r2d3)
viz <- r2d3(data=dataExample, script = "barchart.js")
save_d3_html(viz, file = "viz.html")
<head>
<meta charset="utf-8">
<script src="https://d3js.org/d3.v5.min.js"></script>
<style>
body {
padding-top: 25px;
margin: auto;
width: 650px;
font: 18px arial;
}
</style>
</head>
<body>
<b>Dynamic bar-chart example.</b>
<svg id="chart" width="650" height="420"></svg>
Choose year:
<select id="year"></select>
<input type="checkbox" id="sort">
Toggle sort
<script>
d3.csv("data.csv").then(d => chart(d));
function chart(csv) {
csv.forEach(function(d) {
var dates = d.date.split("-");
d.year = dates[0]; d.month = dates[1];
d.value = +d.value;
return d;
})
var months = [...new Set(csv.map(d => d.month))],
years  = [...new Set(csv.map(d => d.year))];
var options = d3.select("#year").selectAll("option")
.data(years)
.enter().append("option")
.text(d => d)
var svg = d3.select("#chart"),
margin = {top: 25, bottom: 10, left: 25, right: 25},
width = +svg.attr("width") - margin.left - margin.right,
height = +svg.attr("height") - margin.top - margin.bottom;
var x = d3.scaleBand()
.range([margin.left, width - margin.right])
.padding(0.1)
.paddingOuter(0.2)
var y = d3.scaleLinear()
.range([height - margin.bottom, margin.top])
var xAxis = g => g
.attr("transform", "translate(0," + (height - margin.bottom) + ")")
.call(d3.axisBottom(x).tickSizeOuter(0))
var yAxis = g => g
.attr("transform", "translate(" + margin.left + ",0)")
.call(d3.axisLeft(y))
svg.append("g")
.attr("class", "x-axis")
svg.append("g")
.attr("class", "y-axis")
update(d3.select("#year").property("value"), 0)
function update(year, speed) {
var data = csv.filter(f => f.year == year)
y.domain([0, d3.max(data, d => d.value)]).nice()
svg.selectAll(".y-axis").transition().duration(speed)
.call(yAxis);
data.sort(d3.select("#sort").property("checked")
? (a, b) => b.value - a.value
: (a, b) => months.indexOf(a.month) - months.indexOf(b.month))
x.domain(data.map(d => d.month))
svg.selectAll(".x-axis").transition().duration(speed)
.call(xAxis)
var bar = svg.selectAll(".bar")
.data(data, d => d.month)
bar.exit().remove();
bar.enter().append("rect")
.attr("class", "bar")
.attr("fill", "steelblue")
.attr("width", x.bandwidth())
.merge(bar)
.transition().duration(speed)
.attr("x", d => x(d.month))
.attr("y", d => y(d.value))
.attr("height", d => y(0) - y(d.value))
}
chart.update = update;
}
var select = d3.select("#year")
.style("border-radius", "5px")
.on("change", function() {
chart.update(this.value, 750)
})
var checkbox = d3.select("#sort")
.style("margin-left", "45%")
.on("click", function() {
chart.update(select.property("value"), 750)
})
</script>
</body>
r2d3::r2d3("barChart.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
viz <- r2d3(data=dataExample, script = "barchart.js")
viz
viz <- r2d3(data=dataExample, script = "barchart.js")
viz
viz <- r2d3(data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20), script = "barchart.js")
viz
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#Install r2d3
devtools::install_github("rstudio/r2d3")
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find repositories
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Find most popular language used for each repo in the given data.frame and the number of bytes of that language written
PopularLanguages = function(gitRepos)
{
#Re-initialise Data Frame for unit testing
Languages = NULL
if(is.null(nrow(gitRepos)) | is.null(gitRepos$languages_url))
{
print("Incorrect data frame given for repos")
return(Languages)
}else
{
for(i in 1:nrow(gitRepos))
{
reqTemp = GET(paste(gitRepos$languages_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
dataFrameTemp
name = paste(gitRepos$name[i])
#If no languages are listed, adds to data frame with a blank value
if(length(dataFrameTemp) == 0)
{
newRow = data.frame(Repo=name, Language="None Entered", Bytes=0)
Languages = rbind(Languages, newRow)
}else
{
language = NULL
bytes = -1
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp))
{
if(as.numeric(dataFrameTemp[j]) > bytes)
{
language = names(dataFrameTemp)[j]
bytes = as.numeric(dataFrameTemp[j])
}
}
#Adds it to DF
newRow = data.frame(Repo=name, Language=language, Bytes=bytes)
Languages = rbind(Languages, newRow)
}
}
return(Languages)
}
}
Languages = PopularLanguages(gitReposDF)
#Gets number of contributions (commits) made to each of the repositories in the data.frame
ContributionsMade = function(gitRepos)
{
#Re-initialise Data Frame for unit testing
Contributions = NULL
if(is.null(nrow(gitRepos)) | is.null(gitRepos$contributors_url))
{
print("Incorrect data frame given for repos")
return(Contributions)
}else
{
for(i in 1:nrow(gitRepos))
{
reqTemp = GET(paste(gitRepos$contributors_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
dataFrameTemp
name = paste(gitRepos$name[i])
#If no contributors are listed, adds to data frame with a blank value
if(length(dataFrameTemp) == 0)
{
newRow = data.frame(Repo=name, NumberOfCommits=0, NumberOfContributors=0)
Contributions = rbind(Contributions, newRow)
}else
{
totalCommits=0
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp$contributions))
{
totalCommits = totalCommits + as.numeric(dataFrameTemp$contributions[j])
}
#Adds it to DF
newRow = data.frame(Repo=name, NumberOfCommits=totalCommits, NumberOfContributors=length(dataFrameTemp$contributions))
Contributions = rbind(Contributions, newRow)
}
}
return(Contributions)
}
}
Contributions = ContributionsMade(gitReposDF)5
Contributions
r2d3::r2d3("barChart.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
dataExample = read.csv("data.csv")
dataExample
#Plot Data
library(r2d3)
viz <- r2d3(data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20), script = "barchart.js")
viz
viz <- r2d3(data=dataExample, script = "barchart.js")
viz
r2d3::r2d3("barChart.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("barChart.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("barChart.js", data=read.csv("data.csv"))
r2d3::r2d3("barChart.js", data=read.csv("data.csv"))
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools","sunburstR", "shiny")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
library(sunburstR)
library(shiny)
install.packages("sunburstR")
#Visualisation
runExample("01_hello")
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools", "shiny")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#library(sunburstR)
library(shiny)
#Visualisation
runExample("01_hello")
install.packages("rlang")
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools", "shiny")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#library(sunburstR)
library(shiny)
#Visualisation
runExample("01_hello")
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
ui <- fluidPage(
# App title ----
titlePanel("Plot"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
runApp('Interrogate API.R')
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools", "shiny")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#library(sunburstR)
library(shiny)
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find repositories
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Find most popular language used for each repo in the given data.frame and the number of bytes of that language written
PopularLanguages = function(gitRepos)
{
#Re-initialise Data Frame for unit testing
Languages = NULL
if(is.null(nrow(gitRepos)) | is.null(gitRepos$languages_url))
{
print("Incorrect data frame given for repos")
return(Languages)
}else
{
for(i in 1:nrow(gitRepos))
{
reqTemp = GET(paste(gitRepos$languages_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
dataFrameTemp
name = paste(gitRepos$name[i])
#If no languages are listed, adds to data frame with a blank value
if(length(dataFrameTemp) == 0)
{
newRow = data.frame(Repo=name, Language="None Entered", Bytes=0)
Languages = rbind(Languages, newRow)
}else
{
language = NULL
bytes = -1
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp))
{
if(as.numeric(dataFrameTemp[j]) > bytes)
{
language = names(dataFrameTemp)[j]
bytes = as.numeric(dataFrameTemp[j])
}
}
#Adds it to DF
newRow = data.frame(Repo=name, Language=language, Bytes=bytes)
Languages = rbind(Languages, newRow)
}
}
return(Languages)
}
}
Languages = PopularLanguages(gitReposDF)
Languages
#Gets number of contributions (commits) made to each of the repositories in the data.frame
ContributionsMade = function(gitRepos)
{
#Re-initialise Data Frame for unit testing
Contributions = NULL
if(is.null(nrow(gitRepos)) | is.null(gitRepos$contributors_url))
{
print("Incorrect data frame given for repos")
return(Contributions)
}else
{
for(i in 1:nrow(gitRepos))
{
reqTemp = GET(paste(gitRepos$contributors_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
dataFrameTemp
name = paste(gitRepos$name[i])
#If no contributors are listed, adds to data frame with a blank value
if(length(dataFrameTemp) == 0)
{
newRow = data.frame(Repo=name, NumberOfCommits=0, NumberOfContributors=0)
Contributions = rbind(Contributions, newRow)
}else
{
totalCommits=0
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp$contributions))
{
totalCommits = totalCommits + as.numeric(dataFrameTemp$contributions[j])
}
#Adds it to DF
newRow = data.frame(Repo=name, NumberOfCommits=totalCommits, NumberOfContributors=length(dataFrameTemp$contributions))
Contributions = rbind(Contributions, newRow)
}
}
return(Contributions)
}
}
Contributions = ContributionsMade(gitReposDF)
Contributions
runApp()
runExample("08_html")
runApp()
runApp()
Contributions
Contributions
Contributions = ContributionsMade(gitReposDF)
Contributions
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Contributions[1:30,]
Contributions
runApp()
runApp()
runApp()
Languages
?histogram
?barplot
