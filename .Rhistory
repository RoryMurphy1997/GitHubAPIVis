secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/RoryMurphy1997/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Gives null for dataframe with one item, need to fix
nrow(gitReposDF)
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/RoryMurphy1997/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Gives null for dataframe with one item, need to fix
nrow(gitReposDF)
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF$full_name)
}
}
#Run these 3 lines the first time code is run
library(jsonlite)
library(httpuv)
library(httr)
# Run from here each time
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/RoryMurphy1997/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Gives null for dataframe with one item, need to fix
nrow(gitReposDF)
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF$full_name)
}
}
#Gives null for dataframe with one item, need to fix
gitReposDF
nrow(gitReposDF)
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Gives null for dataframe with one item, need to fix
gitReposDF
nrow(gitReposDF)
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF$full_name)
}
}
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Gives null for dataframe with one item, need to fix
gitReposDF
nrow(gitReposDF)
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF$owner)
}
}
# Run from here each time
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Gives null for dataframe with one item, need to fix
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
print(gitReposDF$owner)
}
# Run from here each time
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Gives null for dataframe with one item, need to fix
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
print(gitReposDF$full_name)
}
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Gives null for dataframe with one item, need to fix
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
print(gitReposDF$name)
}
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitMicrosis = gitReposDF[gitReposDF$name == "microsis", "created_at"]
gitMicrosis
gitReposDF$name
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name
# Subset data.frame
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
gitMicrosis
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name
# Find Microsis repository
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
req2 = GET(gitMicrosis$html_url)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitMicrosisDF
gitMicrosis$html_url
gitMicrosis$collaborators_url
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
gitMicrosis$collaborators_url
req2 = GET(gitMicrosis$collaborators_url)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisCollaboratorsDF = jsonlite::fromJSON(jsonlite::toJSON(json2))
gitMicrosisCollaboratorsDF
# Run from here each time
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name
# Find Microsis repository
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
gitMicrosis$collaborators_url
req2 = GET(gitMicrosis$collaborators_url)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisCollaboratorsDF = jsonlite::fromJSON(jsonlite::toJSON(json2))
gitMicrosisCollaboratorsDF
gitMicrosis$followers_url
gitMicrosis$teams_url
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
gitMicrosis$languages_url
req2 = GET(gitMicrosis$languages_url)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisCollaboratorsDF = jsonlite::fromJSON(jsonlite::toJSON(json2))
gitMicrosisCollaboratorsDF
# Run from here each time
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name
# Find Microsis repository
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
gitMicrosis$languages_url
req2 = GET(gitMicrosis$languages_url, gtoken)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisCollaboratorsDF = jsonlite::fromJSON(jsonlite::toJSON(json2))
gitMicrosisCollaboratorsDF
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name
# Find Microsis repository
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
gitMicrosis$languages_url
req2 = GET("https://api.github.com/repos/Caged/microsis/languages", gtoken)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisCollaboratorsDF = jsonlite::fromJSON(jsonlite::toJSON(json2))
gitMicrosisCollaboratorsDF
#Get languages used in Microsis repository
gitMicrosis$languages_url
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name
# Find Microsis repository
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
#Get languages used in Microsis repository
gitMicrosis$languages_url
req2 = GET(gitMicrosis$languages_url, gtoken)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisCollaboratorsDF = jsonlite::fromJSON(jsonlite::toJSON(json2))
gitMicrosisCollaboratorsDF
# Run from here each time
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name
# Find Microsis repository
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
#Get languages used in Microsis repository
gitMicrosis$languages_url
req2 = GET('"' + gitMicrosis$languages_url + '"', gtoken)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisCollaboratorsDF = jsonlite::fromJSON(jsonlite::toJSON(json2))
gitMicrosisCollaboratorsDF
# Run from here each time
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name
# Find Microsis repository
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
#Get languages used in Microsis repository
gitMicrosis$languages_url
req2 = GET(paste('"' + gitMicrosis$languages_url + '"'), gtoken)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisCollaboratorsDF = jsonlite::fromJSON(jsonlite::toJSON(json2))
gitMicrosisCollaboratorsDF
# Run from here each time
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name
# Find Microsis repository
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
#Get languages used in Microsis repository
gitMicrosis$languages_url
req2 = GET(paste(gitMicrosis$languages_url), gtoken)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisCollaboratorsDF = jsonlite::fromJSON(jsonlite::toJSON(json2))
gitMicrosisCollaboratorsDF
req2 = GET(paste(gitMicrosis$languages_url), gtoken)
library(jsonlite)
library(httpuv)
library(httr
req2 = GET(paste(gitMicrosis$languages_url), gtoken)
gitMicrosisCollaboratorsDF
gitMicrosisCollaboratorsDF = NULL
gitMicrosisCollaboratorsDF
# Run from here each time
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name
# Find Microsis repository
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
#Get languages used in Microsis repository
gitMicrosis$languages_url
req2 = GET(paste(gitMicrosis$languages_url), gtoken)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisCollaboratorsDF = jsonlite::fromJSON(jsonlite::toJSON(json2))
gitMicrosisCollaboratorsDF
library(jsonlite)
library(httpuv)
library(httr)
# Run from here each time
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF$name
# Find Microsis repository
gitMicrosis = gitReposDF[gitReposDF$name == "microsis",]
#Get languages used in Microsis repository
gitMicrosis$languages_url
req2 = GET(paste(gitMicrosis$languages_url), gtoken)
stop_for_status(req2)
json2 = content(req2)
gitMicrosisCollaboratorsDF = jsonlite::fromJSON(jsonlite::toJSON(json2))
gitMicrosisCollaboratorsDF
