summary(PCA)
plot(PCA, type='l')
PCA$x
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
PCA$x
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
PCA$rotation
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
PCA$center
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA/sum(PCA), type='l')
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA/sum(PCA$sdev), type='l')
plot(proteinNumeric[,2], proteinNumeric[,3], type="n", xlab="PC1", ylab="PC2")
text(proteinNumeric[,2], proteinNumeric[,3], labels=substr(protein[,1],1,2), col=as.integer(protein[,1])
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
plot(proteinNumeric[,2], proteinNumeric[,3], type="n", xlab="PC1", ylab="PC2")
text(proteinNumeric[,2], proteinNumeric[,3], labels=substr(protein[,1],1,2), col=as.integer(protein[,1]))
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
newProtein = predict(PCA)
plot(newProtein[,2], newProtein[,3], type="n", xlab="PC1", ylab="PC2")
text(newProtein[,2], newProtein[,3], labels=substr(protein[,1],1,2), col=as.integer(protein[,1]))
?predict
plot(newProtein[,2], newProtein[,3], newProtein[,4], type="n", xlab="PC1", ylab="PC2")
text(newProtein[,2], newProtein[,3], newProtein[,4],labels=substr(protein[,1],1,2), col=as.integer(protein[,1]))
plot(newProtein[,2], newProtein[,3], type="n", xlab="PC1", ylab="PC2")
text(newProtein[,2], newProtein[,3], labels=substr(protein[,1],1,2), col=as.integer(protein[,1]))
?plot
dim(iris)
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
newProtein = predict(PCA)
newProtein
protein
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
newProtein = predict(PCA)
newProtein
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
newProtein = predict(PCA)
newProtein
#Trying to add labels back to new data
newProtein= cbind(newProtein, protein[,1])
newProtein
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
newProtein = predict(PCA)
newProtein
#Trying to add labels back to new data
newProtein= cbind(newProtein, protein[,1])
newProtein
protein
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
newProtein = predict(PCA)
newProtein
#Trying to add labels back to new data
newProtein= cbind(newProtein, protein[,1])
newProtein
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
#Standardised data here due to high variance values
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
newProtein = predict(PCA)
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
#Standardised data here due to high variance values
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
#Keep first 3 PCs due to graphability and making up large proportion of data
newProtein = predict(PCA)
newProtein
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
#Standardised data here due to high variance values
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
#Keep first 3 PCs due to graphability and making up large proportion of data
newProtein = predict(PCA)
newProtein
newProteinReduced = newProtein[,1:3]
newProteinReduced
?cbind.data.frame
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
#Standardised data here due to high variance values
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
#Keep first 3 PCs due to graphability and making up large proportion of data
newProtein = predict(PCA)
newProtein
newProteinReduced = newProtein[,1:3]
labelledProtein = cbind(newProteinReduced, protein[,1])
labelledProtein
protein
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
#Standardised data here due to high variance values
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
#Keep first 3 PCs due to graphability and making up large proportion of data
newProtein = predict(PCA)
newProtein
newProteinReduced = newProtein[,1:3]
labelledProtein = cbind(newProteinReduced, protein[,2])
labelledProtein
protein
labels = c('Albania','Austria','Belgium','Bulgaria', 'Czechosolvakia', 'Denmark', 'EastGermany', 'Finland', 'France', 'Greece', 'Hungary','Ireland','Italy','Netherlands','Norway','Poland','Portugal','Romania','Spain','Sweden','Switzerland','UK','USSR','West Germany','Yugoslavia')
labels
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
#Standardised data here due to high variance values
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
#Keep first 3 PCs due to graphability and making up large proportion of data
newProtein = predict(PCA)
newProtein
newProteinReduced = newProtein[,1:3]
#Had to remake labels since they cant be added to our reduced data otherwise
labels = c('Albania','Austria','Belgium','Bulgaria', 'Czechosolvakia', 'Denmark', 'EastGermany', 'Finland', 'France', 'Greece', 'Hungary','Ireland','Italy','Netherlands','Norway','Poland','Portugal','Romania','Spain','Sweden','Switzerland','UK','USSR','West Germany','Yugoslavia')
labelledProtein = cbind(newProteinReduced, labels)
labelledProtein
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
#Standardised data here due to high variance values
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
#Keep first 3 PCs due to graphability and making up large proportion of data
newProtein = predict(PCA)
newProtein
newProteinReduced = newProtein[,1:3]
#Had to remake labels since they cant be added to our reduced data otherwise
labels = c('Albania','Austria','Belgium','Bulgaria', 'Czechosolvakia', 'Denmark', 'EastGermany', 'Finland', 'France', 'Greece', 'Hungary','Ireland','Italy','Netherlands','Norway','Poland','Portugal','Romania','Spain','Sweden','Switzerland','UK','USSR','West Germany','Yugoslavia')
labelledProtein = cbind(newProteinReduced, labels)
labelledProtein
plot(newProtein[,2], newProtein[,3], type="n", xlab="PC1", ylab="PC2")
text(newProtein[,2], newProtein[,3], labels=substr(protein[,1],1,2), col=as.integer(protein[,1]))
protein=read.table("protein.txt", header = T)
protein=read.table("protein.txt", header = T)
protein
proteinNumeric = protein[,2:10]
var(proteinNumeric)
#Standardised data here due to high variance values
PCA = prcomp(proteinNumeric, scale = TRUE)
PCA
summary(PCA)
plot(PCA, type='l')
#Keep first 3 PCs due to graphability and making up large proportion of data
newProtein = predict(PCA)
newProtein
newProteinReduced = newProtein[,1:3]
#PC1: Gives high score for low redmeat, whitemeat, eggs, milk, fish and starch and high cereals, nuts, fr. veg. Thus,
# (with exception of starch), a country will get a high score if they get more protein from plant produce and less from
#meat produce
#PC2: Gives high score for low white meat, milk and cereal and high fish, starch, nuts and fruit/vegitables (cant think
#of any relevant correlation here, maybe the fact that the low score values are more developed county oriented (ie meat
#is generally more expensive while cereal and milk require processing while fish, starch, nuts and fruit/veg can be
#found more easily in nature))
#PC3: Gives high score for low red meat, milk and fish and high score for white meat, eggs, starch and fruit/veg
#white meat and eggs are generally birds, other than that again I dont really see anything here.
#Had to remake labels since they cant be added to our reduced data otherwise
labels = c('Albania','Austria','Belgium','Bulgaria', 'Czechosolvakia', 'Denmark', 'EastGermany', 'Finland', 'France', 'Greece', 'Hungary','Ireland','Italy','Netherlands','Norway','Poland','Portugal','Romania','Spain','Sweden','Switzerland','UK','USSR','West Germany','Yugoslavia')
labelledProtein = cbind(newProteinReduced, labels)
#Use labelled Proteins going forward
labelledProtein
SS = rep(0,25)
SS[1] = (n-1)*sum(apply(labelledProtein,2,var))
for (i in 2:25)
{
SS[i] = sum(kmeans(labelledProtein, centers=i)$withinss)
}
SS
nrow(labelledProtein)
SS = rep(0,25)]
SS[1] = (nrow(labelledProtein)-1)*sum(apply(labelledProtein,2,var))
for (i in 2:25)
{
SS[i] = sum(kmeans(labelledProtein, centers=i)$withinss)
}
SS
SS = rep(0,25)
SS[1] = (nrow(labelledProtein)-1)*sum(apply(labelledProtein,2,var))
for (i in 2:25)
{
SS[i] = sum(kmeans(labelledProtein, centers=i)$withinss)
}
SS
SS = rep(0,25)
SS[1] = (nrow(labelledProtein)-1)*sum(apply(labelledProtein,2,var))
for (i in 2:25)
{
SS[i] = sum(kmeans(labelledProtein, centers=i)$withinss)
}
SS
#Use labelled Proteins going forward
labelledProtein
#Use labelled Proteins going forward
labelledProtein[,-4]
SS = rep(0,25)
SS[1] = (nrow(labelledProtein[,-4])-1)*sum(apply(labelledProtein,2,var))
for (i in 2:25)
{
SS[i] = sum(kmeans(labelledProtein[,-4], centers=i)$withinss)
}
SS
SS = rep(0,25)
SS[1] = (nrow(labelledProtein[,-4])-1)*sum(apply(labelledProtein,2,var))
for (i in 2:24)
{
SS[i] = sum(kmeans(labelledProtein[,-4], centers=i)$withinss)
}
SS[25] = 0
SS
plot(1:25,SS)
table[SS]
table(SS)
SS
SS[1] = (nrow(labelledProtein[,-4])-1)*sum(apply(labelledProtein,2,var))
SS = rep(0,25)
SS[1] = (nrow(labelledProtein[,-4])-1)*sum(apply(labelledProtein[,-4],2,var))
for (i in 2:24)
{
SS[i] = sum(kmeans(labelledProtein[,-4], centers=i)$withinss)
}
SS[25] = 0
SS
plot(1:25,SS)
SS = rep(0,25)
SS[1] = (nrow(labelledProtein[,-4])-1)*sum(apply(labelledProtein[,-4],2,var))
for (i in 2:24)
{
SS[i] = sum(kmeans(labelledProtein[,-4], centers=i)$withinss)
}
SS[25] = 0
SS
plot(1:25,SS,xlab="K",ylab="Sum of Squared Distances")
#Plot PC1 angainst PC2, doesnt show any particular shapes in data
plot(newProtein[,2], newProtein[,3], type="n", xlab="PC1", ylab="PC2")
text(newProtein[,2], newProtein[,3], labels=substr(protein[,1],1,2), col=as.integer(protein[,1]))
plot(1:25,SS,xlab="K",ylab="Sum of Squared Distances", type = "l")
plot(1:25,SS,xlab="K",ylab="Sum of Squared Distances", type = "o")
#K Means clustering
SS = rep(0,25)
SS[1] = (nrow(labelledProtein[,-4])-1)*sum(apply(labelledProtein[,-4],2,var))
for (i in 2:24)
{
SS[i] = sum(kmeans(labelledProtein[,-4], centers=i)$withinss)
}
SS[25] = 0
SS
plot(1:25,SS,xlab="K",ylab="Sum of Squared Distances", type = "o")
k=2
kcl = kmeans(labelledProtein[,-4], centers = k)
ave= rep(0,k)
for(i in 1:k)
{
g1=olive[which(cl10$cluster==i),] #Selects datain first cluster
ng1=cl10$size[i] #records no of data points in cluster 1
total1=sum(as.matrix(dist(rbind(g1,cl10$centers[i,])))[ng1+1]) #Adds cluster center as additional row of cluster data, creates a distance matrix and sums them
ave[i]=total1 / ng1
}
ave
kcl$clusters
k=2
kcl = kmeans(labelledProtein[,-4], centers = k)
ave= rep(0,k)
for(i in 1:k)
{
g=labelledProtein[which(cl10$cluster==i),] #Selects datain first cluster
ng=kcl$size[i] #records no of data points in cluster 1
total=sum(as.matrix(dist(rbind(g,kcl$centers[i,])))[ng+1]) #Adds cluster center as additional row of cluster data, creates a distance matrix and sums them
ave[i]=total / ng
}
ave
kcl$clusters
k=2
kcl = kmeans(labelledProtein[,-4], centers = k)
ave= rep(0,k)
for(i in 1:k)
{
g=labelledProtein[which(kcl$cluster==i),] #Selects datain first cluster
ng=kcl$size[i] #records no of data points in cluster 1
total=sum(as.matrix(dist(rbind(g,kcl$centers[i,])))[ng+1]) #Adds cluster center as additional row of cluster data, creates a distance matrix and sums them
ave[i]=total / ng
}
ave
kcl$clusters
k=2
kcl = kmeans(labelledProtein[,-4], centers = k)
ave= rep(0,k)
for(i in 1:k)
{
g=labelledProtein[which(kcl$cluster==i),-4] #Selects datain first cluster
ng=kcl$size[i] #records no of data points in cluster 1
total=sum(as.matrix(dist(rbind(g,kcl$centers[i,])))[ng+1]) #Adds cluster center as additional row of cluster data, creates a distance matrix and sums them
ave[i]=total / ng
}
ave
kcl$clusters
k=2
kcl = kmeans(labelledProtein[,-4], centers = k)
ave= rep(0,k)
for(i in 1:k)
{
g=labelledProtein[which(kcl$cluster==i),-4] #Selects datain first cluster
ng=kcl$size[i] #records no of data points in cluster 1
total=sum(as.matrix(dist(rbind(g,kcl$centers[i,])))[ng+1]) #Adds cluster center as additional row of cluster data, creates a distance matrix and sums them
ave[i]=total / ng
}
ave
kcl$centers
k=2
kcl = kmeans(labelledProtein[,-4], centers = k)
ave= rep(0,k)
for(i in 1:k)
{
g=labelledProtein[which(kcl$cluster==i),-4] #Selects datain first cluster
ng=kcl$size[i] #records no of data points in cluster 1
total=sum(as.matrix(dist(rbind(g,kcl$centers[i,])))[ng+1]) #Adds cluster center as additional row of cluster data, creates a distance matrix and sums them
ave[i]=total / ng
}
ave
dist(kcl$centers, method = "euclidian")
#Use labelled Proteins going forward
labelledProtein[,-4]
#Use labelled Proteins going forward
labelledProtein[,c(1,4)]
protein
#Use labelled Proteins going forward
order(labelledProtein[,1])
#Use labelled Proteins going forward
order(labelledProtein[,2])
#Use labelled Proteins going forward
labelledProtein[,1]
order(labelledProtein[,1])
k=3
kcl = kmeans(labelledProtein[,-4], centers = k)
ave= rep(0,k)
for(i in 1:k)
{
g=labelledProtein[which(kcl$cluster==i),-4] #Selects datain first cluster
ng=kcl$size[i] #records no of data points in cluster 1
total=sum(as.matrix(dist(rbind(g,kcl$centers[i,])))[ng+1]) #Adds cluster center as additional row of cluster data, creates a distance matrix and sums them
ave[i]=total / ng
}
ave
dist(kcl$centers, method = "euclidian")
AverageDistanceFromObservationsToClusterCenter
InterClusterDistances
AverageDistanceFromObservationsToClusterCenter = ave
InterClusterDistances = dist(kcl$centers, method = "euclidian")
AverageDistanceFromObservationsToClusterCenter
InterClusterDistances
table(AverageDistanceFromObservationsToClusterCenter)
"Average Distance From Observations to Cluster 1's Centroid'"
ave[1]
"Average Distance From Observations to Cluster 2's Centroid'"
ave[2]
"Average Distance From Observations to Cluster 3's Centroid'"
ave[3]
AverageDistanceFromObservationsToClusterCenter
InterClusterDistances
#Items in cluster 1
labelledProtein[which(kcl$cluster==1),4]
#Items in cluster 2
labelledProtein[which(kcl$cluster==2),4]
#Items in cluster 3
labelledProtein[which(kcl$cluster==3),4]
cluster1
cluster2
cluster3
#Items in cluster 1
cluste1 = labelledProtein[which(kcl$cluster==1),4]
#Items in cluster 2
cluster2 = labelledProtein[which(kcl$cluster==2),4]
#Items in cluster 3
cluster3 = labelledProtein[which(kcl$cluster==3),4]
cluster1
cluster2
cluster3
cluster1 = labelledProtein[which(kcl$cluster==1),4]
#Items in cluster 2
cluster2 = labelledProtein[which(kcl$cluster==2),4]
#Items in cluster 3
cluster3 = labelledProtein[which(kcl$cluster==3),4]
cluster1
cluster2
cluster3
#Run these 3 lines once to install necessary packages
install.packages("jsonlite")
?system2
source("Interrogate API.r", echo = TRUE)
source("InterrogateAPI.R", echo = TRUE)
setwd("~/GitHub/GitHubAPIVis")
source("Interrogate API.R", echo=TRUE)
source("Interrogate API.R", echo=TRUE)
install.packages("jsonlite")
install.packages("httpuv")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
source("Interrogate API.R", echo=TRUE)
source("Interrogate API.R", echo=TRUE)
