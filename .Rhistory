install.packages("jsonlite")
library(jsonlite)
install.packages("httpuv")
library(httpuv)
install.packages("httr")
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?oauth_endpoints
?github_token
?oauth2.0_token
req
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
?stop_for_status
gitDF
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitDF
?config
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
?stop_for_status
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitDF
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
for(i in 1:length(gitDF))
{
gitDF$id
}
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
for(i in 1:length(gitDF))
{
gitDF$id
}
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
for(i in 1:length(gitDF))
{
gitDF[i]$id
}
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
for(i in 1:length(gitDF))
{
print(gitDF[i]$id)
}
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
summary(gitDF)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
summary(gitDF)
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
summary(gitDF)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
summary(gitDF)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
summary(gitDF)
for(i in 1:length(gitDF))
{
print(gitDF$id)
}
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
for(i in 1:length(gitDF))
{
print(gitDF[1,]$id)
}
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
for(i in 1:length(gitDF))
{
print(gitDF[i,]$id)
}
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
for(i in 1:nrow(gitDF))
{
print(gitDF[i,1])
}
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
for(i in 1:nrow(gitDF))
{
print(gitDF[i,2])
}
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitDF))
{
print(gitDF[i,2])
}
library(jsonlite)
library(httpuv)
library(httr)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitDF))
{
print(gitDF[i,2])
}
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitDF))
{
print(gitDF[i,2])
}
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/user", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitDF))
{
print(gitDF[i,2])
}
View(gitDF)
install.packages("jsonlite")
library(jsonlite)
install.packages("httpuv")
library(httpuv)
install.packages("httr")
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/user", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitDF))
{
print(gitDF[i,2])
}
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
install.packages("jsonlite")
install.packages("httpuv")
install.packages("httr")
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitDF))
{
print(gitDF[i,2])
}
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitUserDF))
{
print(gitDF[i,2])
}
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/user", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitUserDF))
{
print(gitDF[i,2])
}
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
View(gitUserDF)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitUserDF))
{
print(gitDF[i,2])
}
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitUserDF))
{
print(gitDF[i,2])
}
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitUserDF))
{
print(gitDF[i,2])
}
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitUserDF))
{
print(gitDF[i,2])
}
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitUserDF))
{
print(gitUserDF[i,2])
}
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitUserDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitUserDF))
{
print(gitUserDF[i,1])
}
