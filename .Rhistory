gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories?since=364>; rel=next", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF[i,1])
}
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET('https://api.github.com/user/repos?page=3&per_page=100>; rel="next"', gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF[i,1])
}
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/octocat/orgs", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF[i,1])
}
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/octocat/orgs", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
if(nrow(gitReosDF)>1)
{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF[i,1])
}
}else
{
print("Given link is empty")
}
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/octocat/orgs", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
if(nrow(gitReposDF)>1)
{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF[i,1])
}
}else
{
print("Given link is empty")
}
#Iterate through and get all
?nrow
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/octocat/orgs", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
if(nrow(gitReposDF) = NULL)
{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF[i,1])
}
}else
{
print("Given link is empty")
}
# Subset data.frame
gitDF[gitReposDF$full_name == "jtleek/datasharing", "created_at"]
#Iterate through and get all
?isNull
#Iterate through and get all
?is.null
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/octocat/orgs", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Iterate through and get all
if(is.null(nrow(gitReposDF)))
{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF[i,1])
}
}else
{
print("Given link is empty")
}
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/octocat/orgs", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/octocat/orgs", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF
#Iterate through and get all
if(is.null(gitReposDF))
{
print("Given link is empty")
}else
{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF[i,1])
}
}
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/octocat", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF[i,1])
}
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/octocat", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
nrow(gitReposDF)
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/zen", gtoken)
req
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/zen", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
json1
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/zen", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/zen", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF[i,1])
}
}
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/defunkt", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("-i -u RoryMurphy1997 https://api.github.com/user", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("-u RoryMurphy1997 https://api.github.com/user", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repos/twbs/bootstrap", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/RoryMurphy1997/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/RoryMurphy1997/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF
#Gives null for dataframe with one item, need to fix
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF[i,1])
}
}
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/RoryMurphy1997/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF
#Gives null for dataframe with one item, need to fix
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF$name)
}
}
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/RoryMurphy1997/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitReposDF
#Gives null for dataframe with one item, need to fix
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF$full_name)
}
}
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/RoryMurphy1997/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Gives null for dataframe with one item, need to fix
nrow(gitReposDF)
oauth_endpoints("github")
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find users
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/RoryMurphy1997/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Gives null for dataframe with one item, need to fix
nrow(gitReposDF)
if(is.null(nrow(gitReposDF)))
{
print("Repository is empty")
}else{
for(i in 1:nrow(gitReposDF))
{
print(gitReposDF$full_name)
}
}
