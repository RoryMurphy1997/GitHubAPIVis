#Increments count of language already recorded
if(fullData$Language[i] %in% languagesGraphData$Language)
{
print(fullData$Language[i])
index = match(fullData$Language[i],languagesGraphData$Language)
print(index)
print(languagesGraphData[index,]$Language)
print(as.numeric(languagesGraphData[index,]$totalBytes) + fullData[i,]$Bytes)
languagesGraphData[index,]$totalBytes = as.numeric(languagesGraphData[index,]$totalBytes) + fullData[i,]$Bytes
print(languagesGraphData[index,]$totalBytes)
languagesGraphData[index,]$numberOfAppearances = as.numeric(languagesGraphData[index,]$numberOfAppearences) + 1
}else{
#Adds newly observed language and the number of bytes written in it
newRow = data.frame(Language = fullData$Language[i], totalBytes = fullData$Bytes[i], numberOfAppearances = 1)
languagesGraphData = rbind(languagesGraphData, newRow)
}
}
languagesGraphData
languagesGraphData = NULL
languagesGraphData[index,]$numberOfAppearances = as.numeric(languagesGraphData[index,]$numberOfAppearences) + 1
#Creates data for visualisation 1
languagesGraphData = data.frame(Language = fullData$Language[1], totalBytes = fullData$Bytes[1], numberOfAppearances = 1)
for(i in 2:nrow(fullData))
{
#Increments count of language already recorded
if(fullData$Language[i] %in% languagesGraphData$Language)
{
print(fullData$Language[i])
index = match(fullData$Language[i],languagesGraphData$Language)
print(index)
print(languagesGraphData[index,]$Language)
print(as.numeric(languagesGraphData[index,]$totalBytes) + fullData[i,]$Bytes)
languagesGraphData[index,]$totalBytes = as.numeric(languagesGraphData[index,]$totalBytes) + fullData[i,]$Bytes
print(languagesGraphData[index,]$totalBytes)
languagesGraphData[index,]$numberOfAppearances = as.numeric(languagesGraphData[index,]$numberOfAppearances) + 1
}else{
#Adds newly observed language and the number of bytes written in it
newRow = data.frame(Language = fullData$Language[i], totalBytes = fullData$Bytes[i], numberOfAppearances = 1)
languagesGraphData = rbind(languagesGraphData, newRow)
}
}
languagesGraphData
CreateGraphData <- function(fullData)
{
if(is.null(nrow(fullData)) | is.null(fullData$Language) | is.null(fullData$Bytes))
{
print("Invalid Data Entry")
return(NULL)
}else{
languagesGraphData = data.frame(Language = NULL, totalBytes = NULL, numberOfAppearances = NULL)
for(i in 1:nrow(fullData))
{
#Increments count of language already recorded
if(fullData$Language[i] %in% languagesGraphData$Language)
{
index = match(fullData$Language[i],languagesGraphData$Language)
languagesGraphData[index,]$totalBytes = as.numeric(languagesGraphData[index,]$totalBytes) + fullData[i,]$Bytes
languagesGraphData[index,]$numberOfAppearances = as.numeric(languagesGraphData[index,]$numberOfAppearances) + 1
}else{
#Adds newly observed language and the number of bytes written in it
newRow = data.frame(Language = fullData$Language[i], totalBytes = fullData$Bytes[i], numberOfAppearances = 1)
languagesGraphData = rbind(languagesGraphData, newRow)
}
}
return(languagesFullGraphData)
}
}
visFullData = CreateGraphData(fullDataCollected)
visFullData
#Combine Contributions and Languages
fullDataCollected = cbind(Contributions, Languages[,-1])
CreateGraphData <- function(fullData)
{
if(is.null(nrow(fullData)) | is.null(fullData$Language) | is.null(fullData$Bytes))
{
print("Invalid Data Entry")
return(NULL)
}else{
languagesGraphData = data.frame(Language = NULL, totalBytes = NULL, numberOfAppearances = NULL)
for(i in 1:nrow(fullData))
{
#Increments count of language already recorded
if(fullData$Language[i] %in% languagesGraphData$Language)
{
index = match(fullData$Language[i],languagesGraphData$Language)
languagesGraphData[index,]$totalBytes = as.numeric(languagesGraphData[index,]$totalBytes) + fullData[i,]$Bytes
languagesGraphData[index,]$numberOfAppearances = as.numeric(languagesGraphData[index,]$numberOfAppearances) + 1
}else{
#Adds newly observed language and the number of bytes written in it
newRow = data.frame(Language = fullData$Language[i], totalBytes = fullData$Bytes[i], numberOfAppearances = 1)
languagesGraphData = rbind(languagesGraphData, newRow)
}
}
return(languagesFullGraphData)
}
}
visFullData = CreateGraphData(fullDataCollected)
visFullData
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr", "devtools", "shiny")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
library(devtools)
#library(sunburstR)
library(shiny)
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API to find repositories
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/repositories", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Find most popular language used for each repo in the given data.frame and the number of bytes of that language written
PopularLanguages = function(gitRepos)
{
#Re-initialise Data Frame for unit testing
Languages = NULL
if(is.null(nrow(gitRepos)) | is.null(gitRepos$languages_url))
{
print("Incorrect data frame given for repos")
return(Languages)
}else
{
for(i in 1:nrow(gitRepos))
{
reqTemp = GET(paste(gitRepos$languages_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
dataFrameTemp
name = paste(gitRepos$name[i])
#If no languages are listed, adds to data frame with a blank value
if(length(dataFrameTemp) == 0)
{
newRow = data.frame(Repo=name, Language="None Entered", Bytes=0)
Languages = rbind(Languages, newRow)
}else
{
language = NULL
bytes = -1
#Find most popular language for the repository
for(j in 1:length(dataFrameTemp))
{
if(as.numeric(dataFrameTemp[j]) > bytes)
{
language = names(dataFrameTemp)[j]
bytes = as.numeric(dataFrameTemp[j])
}
}
#Adds it to DF
newRow = data.frame(Repo=name, Language=language, Bytes=bytes)
Languages = rbind(Languages, newRow)
}
}
return(Languages)
}
}
Languages = PopularLanguages(gitReposDF)
Languages
#Gets number of contributions (commits) made to each of the repositories in the data.frame
ContributionsMade = function(gitRepos)
{
#Re-initialise Data Frame for unit testing
Contributions = NULL
if(is.null(nrow(gitRepos)) | is.null(gitRepos$contributors_url))
{
print("Incorrect data frame given for repos")
return(Contributions)
}else
{
for(i in 1:nrow(gitRepos))
{
reqTemp = GET(paste(gitRepos$contributors_url[i]), gtoken)
stop_for_status(reqTemp)
jsonTemp = content(reqTemp)
dataFrameTemp = jsonlite::fromJSON(jsonlite::toJSON(jsonTemp))
dataFrameTemp
name = paste(gitRepos$name[i])
#If no contributors are listed, adds to data frame with a blank value
if(length(dataFrameTemp) == 0)
{
newRow = data.frame(Repo=name, NumberOfCommits=0, NumberOfContributors=0)
Contributions = rbind(Contributions, newRow)
}else
{
totalCommits=0
#Sums total number of commits made to each repository
for(j in 1:length(dataFrameTemp$contributions))
{
totalCommits = totalCommits + as.numeric(dataFrameTemp$contributions[j])
}
#Adds it to DF
newRow = data.frame(Repo=name, NumberOfCommits=totalCommits, NumberOfContributors=length(dataFrameTemp$contributions))
Contributions = rbind(Contributions, newRow)
}
}
return(Contributions)
}
}
Contributions = ContributionsMade(gitReposDF)
Contributions$Repo[5]
#Combine Contributions and Languages
fullDataCollected = cbind(Contributions, Languages[,-1])
#Subsets Data into large, medium and small
largeData = fullData[which(fullData$NumberOfCommits > 200),]
mediumData = fullData[which(fullData$NumberOfCommits <= 200 & fullData$NumberOfCommits >= 50),]
smallData = fullData[which(fullData$NumberOfCommits < 50),]
#Creates data for visualisations of all sizes
CreateGraphData <- function(fullData)
{
if(is.null(nrow(fullData)) | is.null(fullData$Language) | is.null(fullData$Bytes))
{
print("Invalid Data Entry")
return(NULL)
}else{
languagesGraphData = data.frame(Language = NULL, totalBytes = NULL, numberOfAppearances = NULL)
for(i in 1:nrow(fullData))
{
#Increments count of language already recorded
if(fullData$Language[i] %in% languagesGraphData$Language)
{
index = match(fullData$Language[i],languagesGraphData$Language)
languagesGraphData[index,]$totalBytes = as.numeric(languagesGraphData[index,]$totalBytes) + fullData[i,]$Bytes
languagesGraphData[index,]$numberOfAppearances = as.numeric(languagesGraphData[index,]$numberOfAppearances) + 1
}else{
#Adds newly observed language and the number of bytes written in it
newRow = data.frame(Language = fullData$Language[i], totalBytes = fullData$Bytes[i], numberOfAppearances = 1)
languagesGraphData = rbind(languagesGraphData, newRow)
}
}
return(languagesFullGraphData)
}
}
visFullData = CreateGraphData(fullDataCollected)
visFullData
visFullData = CreateGraphData(fullDataCollected)
visFullData
#Creates data for visualisations of all sizes
CreateGraphData <- function(fullData)
{
if(is.null(nrow(fullData)) | is.null(fullData$Language) | is.null(fullData$Bytes))
{
print("Invalid Data Entry")
return(NULL)
}else{
languagesGraphData = data.frame(Language = NULL, totalBytes = NULL, numberOfAppearances = NULL)
for(i in 1:nrow(fullData))
{
#Increments count of language already recorded
if(fullData$Language[i] %in% languagesGraphData$Language)
{
index = match(fullData$Language[i],languagesGraphData$Language)
languagesGraphData[index,]$totalBytes = as.numeric(languagesGraphData[index,]$totalBytes) + fullData[i,]$Bytes
languagesGraphData[index,]$numberOfAppearances = as.numeric(languagesGraphData[index,]$numberOfAppearances) + 1
}else{
#Adds newly observed language and the number of bytes written in it
newRow = data.frame(Language = fullData$Language[i], totalBytes = fullData$Bytes[i], numberOfAppearances = 1)
languagesGraphData = rbind(languagesGraphData, newRow)
}
}
return(languagesGraphData)
}
}
visFullData = CreateGraphData(fullDataCollected)
visFullData
sum(visFullData$numberOfAppearances)
visFullData = CreateGraphData(fullDataCollected)
visLargeData = CreateGraphData(largeData)
visLargeData
visMediumData = CreateGraphData(mediumData)
visMediumData
visSmallData = CreateGraphData(smallData)
visSmallData
#1. Given an empty data frame, returns NULL and error message
CreateDataGraph(NULL)
#2. Given a data frame with no Language value, returns null
DFTest = data.frame(Name = c("Sandra", "John"))
CreateGraphData(DFTest)
#1. Given an empty data frame, returns NULL and error message
CreateGraphData(NULL)
#2. Given a data frame with no Language value, returns null
DFTest = data.frame(Name = c("Sandra", "John"))
CreateGraphData(DFTest)
DFTest = data.frame(Language = c("Sandra", "John"))
CreateGraphData(DFTest)
#1. Given an empty data frame, returns NULL and error message
CreateGraphData(NULL)
#2. Given a data frame with no Bytes value, returns null and error message
DFTest = data.frame(Language = c("Sandra", "John"))
CreateGraphData(DFTest)
#3. Given a data frame with no Language value, returns null and error message
DFTest = data.frame(NBytes = c("Sandra", "John"))
CreateGraphData(DFTest)
#4. Given data for one language, returns relevant information for visualising said data
rbind(ContributionsMade(gitMicrosisRepo),PopularLanguages(gitMicrosisRepo))
#4. Given data for one language, returns relevant information for visualising said data
rbind(ContributionsMade(gitMicrosisRepo),PopularLanguages(gitMicrosisRepo))
#4. Given data for one language, returns relevant information for visualising said data
cbind(ContributionsMade(gitMicrosisRepo),PopularLanguages(gitMicrosisRepo)[,-1])
ContributionsMade(cbind(ContributionsMade(gitMicrosisRepo),PopularLanguages(gitMicrosisRepo)[,-1]))
#4. Given data for one language, returns relevant information for visualising said data
cbind(ContributionsMade(gitMicrosisRepo),PopularLanguages(gitMicrosisRepo)[,-1])
#4. Given data for one language, returns relevant information for visualising said data
nrow(cbind(ContributionsMade(gitMicrosisRepo),PopularLanguages(gitMicrosisRepo)[,-1]))
for(i in 1:1)
for(i in 1:2)
for(i in 1:2)
{
print("Steve")
}
for(i in 1:1)
for(i in 1:2)
for(i in 1:2)
{
print("Steve")
}
for(i in 1:2)
{
print("Steve")
}
for(i in 1:1)
{
print("Steve")
}
#4. Given data for one language, returns relevant information for visualising said data
temp = cbind(ContributionsMade(gitMicrosisRepo),PopularLanguages(gitMicrosisRepo)[,-1])
ContributionsMade(temp)
nrow(temp)
temp$Language
temp$Bytes
ContributionsMade(temp)
temp2 = cbind(ContributionsMade(gitTwoRepos),PopularLanguages(gitTwoRepos)[,-1])
temp2
CreateGraphData(tem2)
CreateGraphData(temp2)
CreateGraphData(temp)
fullDataCollected
#Loads functions from R file to test
source("Interrogate API.R")
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
#Use API to get repositories
req <- GET("https://api.github.com/repositories", gtoken)
stop_for_status(req)
json1 = content(req)
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitMicrosisRepo = gitReposDF[gitReposDF$node_id == "MDEwOlJlcG9zaXRvcnk0OA==",]
gitRubiniusRepo = gitReposDF[ gitReposDF$node_id == "MDEwOlJlcG9zaXRvcnkyNw==",]
gitJsawesomeRepo = gitReposDF[ gitReposDF$node_id == "MDEwOlJlcG9zaXRvcnkyOQ=="]
gitTwoRepos = rbind(gitMicrosisRepo, gitRubiniusRepo)
gitJSRepos = rbind(gitMicrosisRepo,gitJsawesomeRepo)
# Use API to find Microsis Languages
req <- GET("https://api.github.com/repos/Caged/microsis/languages", gtoken)
stop_for_status(req)
json1 = content(req)
gitMicrosisDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Use API to find rubinius Languages
req <- GET("https://api.github.com/repos/rubinius/rubinius/languages", gtoken)
stop_for_status(req)
json1 = content(req)
gitRubiniusDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
#Test PopularLanguages, the values have been cross checked manually using GitHub API on a web browser.
#1. Given an empty data frame, returns NULL and error message
PopularLanguages(NULL)
#2. Given a data frame with no languages_url value, returns null
DFTest = data.frame(Name = c("Sandra", "John"))
PopularLanguages(DFTest)
#3. Given a data frame of one repository, returns the most popular language use
#Should be Javascript (bytes = 124846)
PopularLanguages(gitMicrosisRepo)
#4. Given a data frame with more than one repository, returns the most popular language of each repository
#Should be JavaScript (bytes = 124846) and C (bytes = 23614738)
PopularLanguages(gitTwoRepos)
#Test ContributionsMade, the values have been cross checked manually using GitHub API on a web browser.
#1. Given an empty data frame, returns NULL and error message
ContributionsMade(NULL)
#2. Given a data frame with no contributors_url value, returns null
DFTest = data.frame(Name = c("Sandra", "John"))
ContributionsMade(DFTest)
#3. Given a data frame of one repository, returns the number of commits and number of contributors to this repository
#Should be 16 commits from 1 contributor
ContributionsMade(gitMicrosisRepo)
#4. Given a data frame with more than one repository, returns the number of commits and number of contributors to
#each repository
#Should be 16 commits and one contributor and  14599 commits by 30 contributors
ContributionsMade(gitTwoRepos)
#Test CreateDGraphData, the values have been cross checked manually using GitHub API on a web browser.
#1. Given an empty data frame, returns NULL and error message
CreateGraphData(NULL)
#2. Given a data frame with no Bytes value, returns null and error message
DFTest = data.frame(Language = c("Sandra", "John"))
CreateGraphData(DFTest)
#3. Given a data frame with no Language value, returns null and error message
DFTest = data.frame(NBytes = c("Sandra", "John"))
CreateGraphData(DFTest)
#4. Given data for one reository, returns relevant information for visualising said data.
#Should be 124846 totalBytes and 1 appearance for javascript
temp = cbind(ContributionsMade(gitMicrosisRepo),PopularLanguages(gitMicrosisRepo)[,-1])
CreateGraphData(temp)
#4. Given data for two reositories with different popular languages, returns relevant information for visualising said
#data.
#Should be 124846 totalBytes and 1 appearance for javascript and
#23614738 bytes and 1 apearance for C
temp2 = cbind(ContributionsMade(gitTwoRepos),PopularLanguages(gitTwoRepos)[,-1])
CreateGraphData(temp2)
#5. Given two repositories with same most pipular languages, combines number of bytes of language written.
#Should be
temp3 = cbind(ContributionsMade(gitJSRepos),PopularLanguages(gitJSRepos)[,-1])
temp3
#Loads functions from R file to test
source("Interrogate API.R")
#Installs relevant packages only if they arent already installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load("jsonlite", "httpuv", "httr")
#Opens necessary libraries
library(jsonlite)
library(httpuv)
library(httr)
oauth_endpoints("github")
#Stores relevant OAth information
myapp <- oauth_app(appname = "Software_Engineering_GitHub_Assignment",
key = "9cdd2af0684fe05044a7",
secret = "a58134728046024f716360e2b7bf4c97210e38fe")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
#Use API to get repositories
req <- GET("https://api.github.com/repositories", gtoken)
stop_for_status(req)
json1 = content(req)
gitReposDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
gitMicrosisRepo = gitReposDF[gitReposDF$node_id == "MDEwOlJlcG9zaXRvcnk0OA==",]
gitRubiniusRepo = gitReposDF[ gitReposDF$node_id == "MDEwOlJlcG9zaXRvcnkyNw==",]
gitJsawesomeRepo = gitReposDF[ gitReposDF$node_id == "MDEwOlJlcG9zaXRvcnkyOQ==",]
gitTwoRepos = rbind(gitMicrosisRepo, gitRubiniusRepo)
gitJSRepos = rbind(gitMicrosisRepo,gitJsawesomeRepo)
#Should be
temp3 = cbind(ContributionsMade(gitJSRepos),PopularLanguages(gitJSRepos)[,-1])
temp3
CreateGraphData(temp3)
runApp()
?barplot
barplot(visFullData$totalBytes)
?barplot
barplot(visFullData$totalBytes,names.arg = visFullData$Language)
visFullData
barplot(visFullData$totalBytes,names.arg = visFullData$Language, width = 2)
?barplot
barplot(visFullData$totalBytes,names.arg = visFullData$Language)
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2)
shiny::runApp()
runApp()
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2, las=2)
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2, las=2)
runApp()
runApp()
runApp()
par(mar=c(7,5,1,1))
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2, las=2)
?par
par(mar=c(10,5,1,1))
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2, las=2)
par(mar=c(11,5,1,1))
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2, las=2)
runApp()
par(mar=c(11,5,10,1))
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2, las=2)
par(mar=c(11,10,1,1))
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2, las=2)
par(mar=c(11,1,1,1))
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2, las=2)
par(mar=c(11,3,1,1))
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2, las=2)
par(mar=c(11,5,1,1))
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2, las=2)
par(mar=c(11,5,5,1))
barplot(visFullData$totalBytes,names.arg = visFullData$Language,col = 2, las=2)
visFullData$totalBytes
barplot(visFullData$numberOfAppearances,names.arg = visFullData$Language,col = 2, las=2)
runApp()
?barplot
barplot(visFullData$numberOfAppearances,names.arg = visFullData$Language,col = 2, las=2, main ="Number of repositories where language was most popular language used.")
pie(visFullData$numberOfAppearances, labels =  lbls, main="% of Repositories where Lnaguage was most popular one used")
pie(visFullData$numberOfAppearances, labels =  visFullData$Language, main="% of Repositories where Lnaguage was most popular one used")
visFullData
?pie
runApp()
